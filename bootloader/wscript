#! /usr/bin/env python
# encoding: utf-8
#
# Flare Bootloader
#

import buildcontrol
import builditems

directories = [
        'drivers',
        'fs',
        'aarch64-mmu',
        ]

sources = {
    'default': [
        'boot-buffer.c',
        'boot-factory-config.c',
        'boot-load.c',
        'boot-script.c',
        'datasafe.c',
        'factory-boot.c',
        'reset.c',
        ],
    'versal': [],
    'zynqmp': [
        '_exit.c',
        'aarch64-cache.c',
        'aarch64-error.c',
        'aarch64-fsbl-boot-start.S',
        'aarch64-handoff.S',
        'aarch64-handoff.c',
        'zynqmp-atf-return.S',
        'zynqmp-atf.c',
        'zynqmp-datasafe.c',
        'zynqmp-pre-main.c',
        'zynqmp-vectors.S',
        ],
    'zynq7000': [
        'zynq7000-handoff.c',
        'zynq7000-cache.c',
        'zynq7000-datasafe.c',
        'zynq7000-error.c',
        'arm-fsbl-boot-start.S',
        'cpu_init.S',
        'zynq7000-mmu.c',
        'crt0.S',
        'zynq7000-begin-lo.S',
        ]
}

includes = {
    'default': [
        '.',
        'drivers/crc',
        'drivers/io',
        'drivers/timer',
        'drivers/flash',
        'drivers/wdog',
        'drivers/slcr',
        'drivers/md5',
        'drivers/zlib',
        'drivers/jffs2',
        'drivers/uart',
        'drivers',
        ],
    'versal': [],
    'zynqmp': [
        '../build/xilinx/',
      ],
    'zynq7000': []
}

defines = {
    'default': [],
    'versal': [],
    'zynqmp': [],
    'zynq7000': []
}

cflags = {
    'default': [],
    'versal': [],
    'zynqmp': [],
    'zynq7000': []
}

def init(ctx):
    buildcontrol.recurse(ctx, directories)

def options(opt):
    buildcontrol.recurse(opt, directories)

def configure(conf):
    buildcontrol.recurse(conf, directories)

def build(bld):
    buildcontrol.recurse(bld, directories)
    bld.stlib(target='flare',
              features='c',
              source=builditems.get_items(bld, sources),
              includes=builditems.get_includes(bld, includes),
              cflags=builditems.get_cflags(bld, cflags),
              asflags=builditems.get_cflags(bld, cflags),
              defines=builditems.get_defines(bld, defines),
              use=['flare_aarch64_mmu', 'flare_fs'])
